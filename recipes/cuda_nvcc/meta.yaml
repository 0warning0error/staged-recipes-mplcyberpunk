{% set name = "cuda_nvcc" %}
{% set version = "11.8.89" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-ppc64le" %}  # [ppc64le]
{% set platform = "linux-sbsa" %}  # [aarch64]
{% set platform = "windows-x86_64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cuda/redist/{{ name }}/{{ platform }}/{{ name }}-{{ platform }}-{{ version }}-archive.{{ extension }}

  sha256: 7ee8450dbcc16e9fe5d2a7b567d6dec220c5894a94ac6640459e06231e3b39a5  # [linux64]
  sha256: 16fcfac1ef89584a36bf725b1706c51ecf9754acc712600f5f3e70f6ba119c8c  # [ppc64le]
  sha256: 17d30d924a1d6ff5748a0b6a4e7c25fd39644250cef9184fba520362f70ff798  # [aarch64]
  sha256: 4cdd7555f31186e5af0b14ab761838bbc8b5e6441589f5bb326930c7a502dcd3  # [win]
  patches:
    - nvcc.profile.patch

build:
  # uncomment the following line if the package is pure python and the recipe is exactly the same for all platforms.
  # it is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # see https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # if the installation is complex, or different between unix and windows, use separate bld.bat and build.sh files instead of this key.
  # by default, the package will be built for the python versions supported by conda-forge and for all major oss.
  # add the line "skip: true  # [py<35]" (for example) to limit to python 3.5 and newer, or "skip: true  # [not win]" to limit to windows.
  # more info about selectors can be found in the conda-build docs: 
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  #script: {{ python }} -m pip install . -vv
  number: 0
  skip: true  # [osx]
  missing_dso_whitelist:
    - /lib64/libpthread.so.0
    - /lib64/libdl.so.2
    - /lib64/libm.so.6
    - /lib64/libgcc_s.so.1
    - /lib64/libc.so.6
    - /lib64/ld-linux-x86-64.so.2
    - /lib64/librt.so.1
    - /lib64/libstdc++.so.6

test:
  commands:
    - test -f "${PREFIX}/bin/nvcc"  # [linux]
    - if not exist %LIBRARY_BIN%\\bin\\nvcc.exe exit 1  # [win]

outputs:
  - name: cuda-nvcc
    files:
      - bin
      - include
      - lib
      - nvvm

about:
  home: https://developer.nvidia.com/cuda-toolkit
  license_file: LICENSE
  license_url: https://docs.nvidia.com/cuda/eula/index.html
  summary: Compiler for CUDA applications.
  description: |
    Compiler for CUDA applications.
  doc_url: https://docs.nvidia.com/cuda/index.html

extra:
  recipe-maintainers:
    - adibbley
