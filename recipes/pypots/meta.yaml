# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "PyPOTS" %}
{% set version = "0.0.9" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/WenjieDu/PyPOTS/archive/v0.0.9.tar.gz
  sha256: 3718e8c26b5bc048c488b06a310e5c9b29108386e3176caa9d164dadc5296bef

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs: 
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  host:
    - python >=3.7, <3.11
    - pip
  run:
    - python >=3.7, <3.11
    - numpy >=1.23.3
    - scikit-learn >=0.24.1
    - pytorch >=1.11.0
    - scipy
    - tensorboard
    - pandas
    - matplotlib-base
    - pycorruptor
    - tsdb

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - pypots
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  requires:
    - pip
  commands:
    - pip check

about:
  home: https://github.com/WenjieDu/PyPOTS
  summary: 'A Python Toolbox for Data Mining on Partially-Observed Time Series'
  description: |
    PyPOTS is born to become a handy toolbox that is going to make data mining on POTS easy rather than tedious, 
    to help engineers and researchers focus more on the core problems in their hands rather than on how to deal 
    with the missing parts in their data. PyPOTS will keep integrating classical and the latest state-of-the-art 
    data mining algorithms for partially-observed multivariate time series. For sure, besides various algorithms, 
    PyPOTS is going to have unified APIs together with detailed documentation and interactive examples across 
    algorithms as tutorials.
  license: GPL-3.0-only
  license_file: LICENSE
  doc_url: https://pypots.readthedocs.io
  dev_url: https://github.com/WenjieDu/PyPOTS

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - WenjieDu
