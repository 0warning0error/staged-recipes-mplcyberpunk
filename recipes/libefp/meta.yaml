{% set name = "libefp" %}
{% set libefp_version = "1.5.0" %}
{% set version = "0.6.1" %}
{% set sha256 = "59752e5cfb72108eb26d556e4518b8cc1e0bdb26851f9e119316175aaa5294a0" %}

package:
  name: {{ name|lower }}-split
  version: {{ version }}

source:
  url: https://github.com/loriab/pylibefp/archive/cf_flex.tar.gz
  #url: https://github.com/loriab/pylibefp/archive/v{{ version }}.tar.gz
#  sha256: {{ sha256 }}
  # note above accesses upstream project
  # * https://github.com/libefp2/libefp/archive/15cd7ce.tar.gz  # v1.5.0 + 10 (docs and a cmake lapack patch)
  # * https://github.com/loriab/libefp/archive/dc89607.tar.gz  # v1.5.0 + 11 (above and a cmake install windows patch)

build:
  number: 0
  binary_relocation: true
  skip: true  # [osx or not py==39]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - ninja
  host:
    - python
    - pybind11
    - qcelemental
    - mkl-devel
    - libblas * *mkl

outputs:
  - name: libefp
    version: {{ libefp_version }}
    build:
      run_exports:
        - {{ pin_subpackage('libefp', max_pin='x.x') }}
      skip: true  # [osx or not py==39]
    requirements:
      build:
        - {{ compiler('c') }}
        - cmake
        - ninja
      host:
        - mkl-devel
        - libblas * *mkl
      run:
        - libblas * *mkl
    files:
      - include/efp.h                   # [unix]
      - include/libefp/*                # [unix]
      - lib/libefp{{ SHLIB_EXT }}*      # [linux]
      - lib/libefp.*dylib               # [osx]
      - share/cmake/libefp/*            # [unix]
      - share/libefp/*                  # [unix]
      - share/libefp/fraglib/*          # [unix]
      - Library/include/efp.h           # [win]
      - Library/include/libefp/*        # [win]
      - Library/bin/efp*                # [win]
      - Library/lib/efp*                # [win]
      - Library/share/cmake/libefp      # [win]
      - Library/share/libefp/*          # [win]
      - Library/share/libefp/fraglib/*  # [win]
    test:
      commands:
        - ls -l $PREFIX/lib                                       # [unix]
        - ls -l $PREFIX/share/cmake/libefp                        # [unix]
        - dir %PREFIX%\\Library                                   # [win]
        - dir %PREFIX%\\Library\\include                          # [win]
        # Verify library
        - test -f $PREFIX/lib/libefp$SHLIB_EXT                    # [unix]
        - test ! -f $PREFIX/lib/libefp.a                          # [unix]
        - if not exist %PREFIX%\\Library\\lib\\efp.lib exit 1     # [win]
        - if not exist %PREFIX%\\Library\\bin\\efp.dll exit 1     # [win]
        # Verify accessories
        - test -f $PREFIX/include/libefp/efp.h                    # [unix]
        - test -f $PREFIX/share/cmake/libefp/libefpConfig.cmake   # [unix]
        - test -f $PREFIX/share/libefp/fraglib/h2.efp             # [unix]
        - if not exist %PREFIX%\\Library\\include\\libefp\\efp.h exit 1  # [win]
        #- if not exist %PREFIX%\\Library\\share\\cmake\\libefp\\libefpConfig.cmake exit 1  # [win]
        - if not exist %PREFIX%\\Library\\share\\libefp\\fraglib\\h2.efp exit 1  # [win]
        # Inspect linkage
        - ldd -v $PREFIX/lib/libefp$SHLIB_EXT                     # [linux and build_platform == target_platform]
        - otool -L $PREFIX/lib/libefp$SHLIB_EXT                   # [osx]

  - name: pylibefp
    version: {{ version }}
    build:
      skip: true  # [osx or not py==39]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - {{ pin_subpackage('libefp', exact=True) }}
        - python
        - pybind11
        - qcelemental
        - mkl-devel
        - libblas * *mkl
      run:
        - {{ pin_subpackage('libefp', exact=True) }}
        - python
        - {{ pin_compatible('qcelemental', max_pin='x') }}
        - libblas * *mkl
    files:
      - lib/python{{ PY_VER }}/site-packages/pylibefp  # [unix]
      - Lib/site-packages/pylibefp                     # [win]
      # if later install cmake config files for Py module, these are the correct filters
      # - lib/cmake/pylibefp/*                           # [unix]
      # - Library/lib/cmake/pylibefp/*                   # [win]
    test:
      requires:
        - numpy
        - pytest
      files:
        - test_pylibefp.py
      imports:
        - pylibefp
      commands:
        - ls -l $SP_DIR/pylibefp                                  # [unix]
        - dir %SP_DIR%\\pylibefp                                  # [win]
        # Verify module
        - test -f $SP_DIR/pylibefp/core*.so                       # [unix]
        - if not exist %SP_DIR%\\pylibefp\\core*.pyd exit 1       # [win]
        # Inspect linkage
        - ldd -v $SP_DIR/pylibefp/core*.so                        # [linux]
        - otool -L $SP_DIR/pylibefp/core*.so                      # [osx]
        # Actually test
        #- python -c "import pylibefp; assert pylibefp.test() == 0"
        - pytest --cache-clear -v -rws --color yes $SP_DIR/pylibefp  # [unix]
        #- pytest --cache-clear -v -rws --color yes %SP_DIR%\\pylibefp  # [win]
        - python test_pylibefp.py
    about:
      home: https://github.com/loriab/pylibefp
      dev_url: https://github.com/loriab/pylibefp/blob/master/README.md
      doc_source_url: https://github.com/loriab/pylibefp/blob/master/doc/source/introduction.rst
      license: BSD-3-Clause
      license_url: https://opensource.org/licenses/BSD-3-Clause
      license_file: LICENSE
      license_family: BSD
      summary: "L. A. Burns's python bindings to libefp"

about:
  home: https://github.com/libefp2/libefp
  dev_url: https://github.com/libefp2/libefp/blob/master/README.md
  doc_url: https://libefp2.github.io/doxygen_html/index.html
  license: BSD-2-Clause
  license_url: https://opensource.org/licenses/BSD-2-Clause
  license_file: LICENSE_libefp
  license_family: BSD
  summary: "I. Kaliman and L. Slipchenko's parallel implementation of the Effective Fragment Potential (EFP) method"
  description: |
    The Effective Fragment Potential (EFP) method allows one to describe large molecular systems by
    replacing chemically inert part of a system by a set of Effective Fragments while performing
    regular ab initio calculation on the chemically active part [1-8]. The LIBEFP library is a full
    implementation of the EFP method. It allows users to easily incorporate EFP support into their
    favourite quantum chemistry package. LIBEFP is interfaced to Q-Chem and Psi4 for QM/EFP calculations.

extra:
  feedstock-name: libefp
  recipe-maintainers:
    - loriab
