diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6802b11..b978583 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -25,14 +25,12 @@ set(OpenGL_GL_PREFERENCE "LEGACY")
 find_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets)
 find_package(Shiboken6 6.0.0 REQUIRED)
 find_package(PySide6 6.0.0 REQUIRED)
+find_package(qtadvanceddocking)
 
 # Set CPP standard to C++11 minimum.
 set(CMAKE_CXX_STANDARD 11)
 
 # The C++ project library for which we will create bindings.
-set(qtads_subdir "Qt-Advanced-Docking-System")
-set(qtads_dir ${CMAKE_CURRENT_SOURCE_DIR}/${qtads_subdir})
-add_subdirectory(${qtads_subdir} EXCLUDE_FROM_ALL)
 set(project_library "qtadvanceddocking")
 
 # The name of the generated bindings module (as imported in Python).
@@ -56,20 +54,20 @@ set(generated_sources
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockcomponentsfactory_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockcontainerwidget_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockfocuscontroller_wrapper.cpp
-    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockingstatereader_wrapper.cpp
+    #${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockingstatereader_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockmanager_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockoverlay_wrapper.cpp
-    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockoverlaycross_wrapper.cpp
+    #${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockoverlaycross_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdocksplitter_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockwidget_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cdockwidgettab_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_celidinglabel_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cfloatingdockcontainer_wrapper.cpp
-    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cfloatingdragpreview_wrapper.cpp
+    #${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cfloatingdragpreview_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_ciconprovider_wrapper.cpp
-    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cspacerwidget_wrapper.cpp
-    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_ctitlebarbutton_wrapper.cpp
-    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_ifloatingwidget_wrapper.cpp
+    #${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_cspacerwidget_wrapper.cpp
+    #${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_ctitlebarbutton_wrapper.cpp
+    #${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_ifloatingwidget_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_wrapper.cpp
     ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/pyside6qtads_module_wrapper.cpp
     )
@@ -82,13 +80,15 @@ get_property(shiboken_include_dir TARGET Shiboken6::libshiboken PROPERTY INTERFA
 get_property(shiboken_shared_libraries TARGET Shiboken6::libshiboken PROPERTY IMPORTED_IMPLIB_RELEASE)
 get_property(pyside_include_dir TARGET PySide6::pyside6 PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
 get_property(pyside_shared_libraries TARGET PySide6::pyside6 PROPERTY IMPORTED_IMPLIB_RELEASE)
+get_property(ads_include_dir TARGET ads::qtadvanceddocking PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
+get_property(ads_link_libraries TARGET ads::qtadvanceddocking PROPERTY INTERFACE_LINK_LIBRARIES)
+get_property(ads_shared_libraries TARGET ads::qtadvanceddocking PROPERTY IMPORTED_IMPLIB_RELEASE)
 
 find_program(shiboken_path "shiboken6${CMAKE_EXECUTABLE_SUFFIX}")
 if(NOT EXISTS ${shiboken_path})
     message(FATAL_ERROR "Shiboken executable not found at path: ${shiboken_path}")
 endif()
 
-
 # ==================================== RPATH configuration ====================================
 
 if(UNIX AND NOT APPLE)
@@ -157,13 +157,18 @@ foreach(_current ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES})
     set(implicit_includes ${implicit_includes} "-I${_current}")
 endforeach()
 
+set(ads_includes)
+foreach(_current ${ads_include_dir})
+    set(ads_includes ${ads_includes} "-I${_current}")
+endforeach()
+
 # Set up the options to pass to shiboken.
 set(shiboken_options --generator-set=shiboken --enable-parent-ctor-heuristic
     --enable-pyside-extensions --enable-return-value-heuristic --use-isnull-as-nb_nonzero
     --avoid-protected-hack
     ${QT_INCLUDES}
     ${implicit_includes}
-    -I${qtads_dir}/src
+    ${ads_includes}
     -T${CMAKE_CURRENT_SOURCE_DIR}
     -T${PYSIDE_TYPESYSTEMS}
     --output-directory=${CMAKE_CURRENT_BINARY_DIR}
@@ -194,19 +199,22 @@ target_include_directories(${bindings_library} PRIVATE ${pyside_additional_inclu
 target_include_directories(${bindings_library} PRIVATE ${pyside_include_dir})
 target_include_directories(${bindings_library} PRIVATE ${Python3_INCLUDE_DIRS})
 target_include_directories(${bindings_library} PRIVATE ${shiboken_include_dir})
-target_include_directories(${bindings_library} PRIVATE "${CMAKE_SOURCE_DIR}/src")
+target_include_directories(${bindings_library} PRIVATE ${ads_include_dir})
 
 target_link_libraries(${bindings_library} PRIVATE Qt6::Widgets)
-target_link_libraries(${bindings_library} PRIVATE ${project_library})
 target_link_libraries(${bindings_library} PRIVATE ${pyside_shared_libraries})
 target_link_libraries(${bindings_library} PRIVATE ${shiboken_shared_libraries})
+target_link_libraries(${bindings_library} PRIVATE ${ads_link_libraries})
+target_link_libraries(${bindings_library} PRIVATE ${ads_shared_libraries})
+target_link_libraries(${bindings_library} PUBLIC ads::qtadvanceddocking)
 
 if (UNIX)
     target_link_libraries(${bindings_library} PUBLIC PySide6::pyside6)
+
+if (APPLE)
+    target_link_libraries(${bindings_library} PRIVATE "-framework Metal")
 endif()
 
-target_compile_options(qtadvanceddocking PRIVATE -Og)
-target_compile_options(${bindings_library} PRIVATE -Og)
 target_compile_definitions(${bindings_library} PRIVATE "-DPy_LIMITED_API=0x03070000")
 
 # Adjust the name of generated module.
@@ -226,7 +234,6 @@ if (WIN32)
     target_link_directories(${bindings_library} PRIVATE ${Python3_LIBRARY_DIRS})
 endif()
 
-
 # ===================================== CMake target - pyi ====================================
 
 set(generate_pyi_options ${bindings_library} --sys-path
@@ -242,7 +249,6 @@ add_dependencies("${bindings_library}_pyi" ${bindings_library})
 file(GLOB hinting_stub_files
     "${CMAKE_CURRENT_BINARY_DIR}/*.pyi")
 
-
 # ================================= Dubious deployment section ================================
 
 install(TARGETS ${bindings_library}
@@ -250,19 +256,11 @@ install(TARGETS ${bindings_library}
         RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}
         )
 
-if(NOT BUILD_STATIC)
-    install(TARGETS ${project_library}
-            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
-            RUNTIME DESTINATION ${CMAKE_INSTALL_LIBDIR}
-            )
-endif()
-
 install(FILES ${hinting_stub_files}
         DESTINATION "${CMAKE_INSTALL_PREFIX}")
 
 install(FILES
-    "${qtads_dir}/LICENSE"
-    "${qtads_dir}/gnu-lgpl-v2.1.md"
+    "LICENSE"
     DESTINATION license/ads
     COMPONENT license
 )
