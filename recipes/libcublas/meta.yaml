{% set name = "libcublas" %}
{% set version = "11.11.3.6" %}
{% set platform = "linux-x86_64" %} # [linux64]
{% set platform = "linux-ppc64le" %} # [ppc64le]
{% set platform = "linux-sbsa" %} # [aarch64]
{% set platform = "windows-x86_64" %} # [win]

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cuda/redist/{{ name }}/{{ platform }}/{{ name }}-{{ platform }}-{{ version }}-archive.tar.xz
  sha256: 045e6455c9f8789b1c7ced19957c7904d23c221f4d1d75bb574a2c856aebae98 # [linux64]
  sha256: 27b07d1fa375404ed0f7ce37573de1c8a5ff8c313b9f388ee7b4ff41d4a8409f # [ppc64le]
  sha256: 38fe90cbbc7da3dbdcd8c29e0fcd60f69baf580d9b3f71a4ee102e3c7fc30b3d # [aarch64]
  sha256: 67b0934a6359e4ee26fff823c356021589d392c4fd49ca12624f570edc08e2b9 # [win]

build:
  number: 0
  skip: true  # [osx]
  missing_dso_whitelist:
    - /lib64/ld-linux-x86-64.so.2
    - /lib64/libc.so.6
    - /lib64/libdl.so.2
    - /lib64/libgcc_s.so.1
    - /lib64/libm.so.6
    - /lib64/libpthread.so.0
    - /lib64/librt.so.1
    - /usr/lib64/libstdc++.so.6

outputs:
  - name: libcublas
    files:
      - lib/lib*blas*.so.*

  - name: libcublas-dev
    requirements:
      run:
        - libcublas >={{ version }}
    files:
      - lib/lib*blas*.so
      - lib/stubs/lib*blas*
      - include/*blas*
      - src/fortran*

  - name: libcublas-static
    requirements:
      run:
        - libcublas-dev >={{ version }}
    files:
      - lib/lib*blas*_static.a

about:
  home: https://developer.nvidia.com/cublas
  # A LicenceRef cannot be used in this case, see:
  # https://github.com/conda-forge/staged-recipes/pull/12882#discussion_r504086944
  license: LicenseRef-NVIDIA-End-User-License-Agreement
  license_file: NVIDIA_EULA
  license_url: https://docs.nvidia.com/cuda/eula/index.html
  description: |
    An implementation of BLAS (Basic Linear Algebra Subprograms) on top of the NVIDIA CUDA runtime.
  doc_url: https://docs.nvidia.com/cuda/cublas/

extra:
  recipe-maintainers:
    - adibbley
    - betatim
