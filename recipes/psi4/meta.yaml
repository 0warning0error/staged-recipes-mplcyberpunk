{% set name = "psi4" %}
{% set version = "1.7.100" %}
{% set sha256 = "1ad1ee819a6b34e54dec8072da9d16c2c98019eba362af60af7b645689e7b4e3" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  #- url: https://github.com/loriab/psi4/archive/intel17l2.tar.gz
  - url: https://github.com/loriab/psi4/archive/cf_iterations.tar.gz
    # url: https://github.com/{{ name }}/{{ name }}/archive/v{{ version }}.tar.gz
    sha256: {{ sha256 }}
  - url: https://github.com/psi4/iomp5md/archive/31b4ccb.tar.gz               # [win]
    sha256: d9c6ad3976183f54b676335885d8557d67ca7b25ac4115b91b4cc42281d95f7c  # [win]
    folder: external_src                                                      # [win]

build:
  number: 0
  binary_relocation: true
  skip: true                                 # [osx]
  skip: true                                 # [py != 39]
  ignore_run_exports:
    - libint

# for review: the libint story
# * this recipe is using a dev package for reasons at https://github.com/conda-forge/libint-feedstock/issues/15
# * libint_dev pkg has a run_exports `x`, which is true for the package in general
# * but for the time being, it's prudent to pin req/run to exact, hence the ignore_run_exports above

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}              # [not win]
    - m2w64-binutils                         # [win]  # provides objdump.exe
    - cmake
    - make                                   # [not win]
    - ninja                                  # [win]
    #- llvm-openmp
    - llvm-openmp                            # [linux]  # <51, 52
    - llvm-openmp                            # [osx]
    #- llvm-openmp                            # [osx or win]
    #- libgomp                                # [linux]  # 51
    #- intel-openmp                           # [win]
  host:
    - eigen
    - boost-cpp
    - mkl-devel                              # [not win]
    - mkl                                    # [not win]
    #- mkl-devel 2021.4                       # [win]  # 46
    #- mkl 2021.4                             # [win]  # 46
    #- mkl-devel                              # [win]  # 47, 48, 49, 50, 51, 52, 53
    #- mkl                                    # [win]  # 47, 48, 49, 50, 51, 52, 53
    - mkl-devel {{ mkl }}                             # [win]  # 54
    - mkl {{ mkl }}                                   # [win]  # 54
    - pybind11
    - pybind11-abi
    - python
    # qc req'd
    - gau2grid
    - libint {{ libint }}
    - libxc-c
    - optking
    - qcelemental
    - qcengine
    # qc opt'l
    - dkh                                    # [not win]
  run:
    - intel-openmp                           # [win]
    - llvm-openmp                            # [not win]
    - libblas * *mkl                         # [not win]
    #- blas * *mkl                         # [win]  # 50, 51, 52, 53
    - libblas * *mkl                         # [win]  # 54
    #- libblas 3.9* 16_win64_mkl             # [win]  # 53
    #- libblas 3.9* *win64_mkl             # [win]  # 52
    #- libblas * *mkl                         # [win]  # 49
    #- blas * *mkl                         # [not win]  # 48 (48 added libefp (note selector inverse from intention))
    - mkl                                    # [not win]
    #- mkl 2021.4                             # [win]  # 46
    #- mkl                                    # [win]  # 47, 48, 49, 50, 51, 52, 53
    - mkl {{ mkl }}                          # [win]  # 54
    - msgpack-python
    - networkx
    - numpy
    - python
    - scipy
    # qc
    - libint {{ libint }}
    - {{ pin_compatible('optking', upper_bound='0.5') }}
    - {{ pin_compatible('qcelemental', upper_bound='0.26') }}
    - {{ pin_compatible('qcengine', upper_bound='0.27') }}
      # someday, qcengine and qcelemental should be `max_pin='x'` again
  run_constrained:
    - pylibefp =={{ pylibefp }}             # [not win]  # 50

# 49: fails to solve run env wanting libblas==3.8.0=10_mkl"
# 53: platform win-64: {MatchSpec("libblas==3.9.0=16_win64_mkl"), MatchSpec("mkl==2022.1.0=h6a75c08_874")}


#outputs:
#    requirements:
#      host:
#        - libblas
#        - liblapack
#    requirements:
#      requirements:
#          run_constrained:
#              - pymdi >={{ pymdi }}
#          host:
#              # qc
#              - ambit {{ ambit }}
#              - chemps2 {{ chemps2 }}
#              - dkh {{ dkh }}                    # nofortran
#              - libecpint {{ libecpint }}
#              - gdma {{ gdma }}                  # nofortran
#              - pcmsolver {{ pcmsolver }} {{ pcmsolver_bld }}  # nofortran
#              - simint {{ simint }}
#              - dftd3 {{ dftd3 }}
#              - gcp {{ gcp }}
#          run:
#              - intel-openmp                   # [linux]
#              - numpy >={{ numpy }},<1.26.0
#              - pytest                                         # drive psi4 --test
#              # qc
#              - {{ pin_compatible('dftd3', max_pin='x.x') }}
#              - {{ pin_compatible('gcp', max_pin='x.x') }}
#              - pcmsolver {{ pcmsolver }} {{ pcmsolver_bld }}  # temporary so right intel_sse4_strlen

test:
  imports:
    - psi4
  requires:
    - pytest >=7.0.1
    - pytest-xdist
    - m2w64-binutils                                                     # [win]  # provides objdump.exe
    # qc runtime opt'l
    #- pylibefp                                                           # [not win]  # 51
    - pylibefp                                                                         # 52
  commands:
    - ls -l $PREFIX/lib                                                  # [unix]
    - ls -l $PREFIX/share/cmake/psi4                                     # [unix]
    - ls -l $SP_DIR/psi4                                                 # [unix]
    - dir %PREFIX%\\Library\\lib                                         # [win]
    #- dir %PREFIX%\\Library\\share\\cmake\\psi4                          # [win]
    - dir %SP_DIR%\\psi4                                                 # [win]
    # Verify module
    - test -f $SP_DIR/psi4/core*.so                                      # [unix]
    - if not exist %SP_DIR%\\psi4\\core*.pyd exit 1                      # [win]
    # Verify executable
    - test -f $PREFIX/bin/psi4                                           # [unix]
    - $PREFIX/bin/psi4 --version                                         # [unix]
    - if not exist %PREFIX%\\Library\\bin\\psi4 exit 1                   # [win]
    - if not exist %PREFIX%\\Library\\bin\\psi4.bat exit 1               # [win]
    - if exist %PREFIX%\\Scripts\\psi4 exit 1                            # [win]
    - if not exist %PREFIX%\\Scripts\\psi4-script.py exit 1              # [win]  # copy of bin/psi4
    - if not exist %PREFIX%\\Scripts\\psi4.exe exit 1                    # [win]
    - "%PREFIX%\\Scripts\\psi4.exe --version"                            # [win]
    # Verify accessories
    - test -f $PREFIX/include/psi4/psi4-dec.h                            # [unix]
    - test -f $PREFIX/share/cmake/psi4/psi4Config.cmake                  # [unix]
    - test -f $PREFIX/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake  # [unix]
    - test -f $PREFIX/share/psi4/basis/cc-pvdz.gbs                       # [unix]
    - if not exist %PREFIX%\\Library\\include\\psi4\\psi4-dec.h exit 1   # [win]
    #- if not exist %PREFIX%\\Library\\share\\cmake\\psi4\\psi4Config.cmake exit 1  # [win]
    #- if not exist %PREFIX%\\Library\\share\\cmake\\TargetLAPACK\\TargetLAPACKConfig.cmake exit 1  # [win]
    - if not exist %PREFIX%\\Library\\share\\psi4\\basis\\cc-pvdz.gbs exit 1  # [win]
    # Inspect linkage
    - ldd -v $SP_DIR/psi4/core*.so                                       # [linux]
    - otool -L $SP_DIR/psi4/core*.so                                     # [osx]
    - objdump.exe -p %SP_DIR%\\psi4\\core.*.pyd | findstr /i "dll"       # [win]
    # Actually test
    - python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"
    - MKL_CBWR=AVX pytest -rws -v --durations=20 --color yes -n auto $SP_DIR/psi4 -m "smoke"  # [unix]
    - pytest -rws -v --durations=20 --color yes -n auto %SP_DIR%\\psi4 -m "smoke and not d2ints"  # [win]

about:
  home: http://psicode.org
  dev_url: https://github.com/psi4/psi4
  doc_url: http://psicode.org/psi4manual/master/index.html
  doc_source_url: https://github.com/psi4/psi4/tree/master/doc/sphinxman/source
  license: LGPL-3.0-only
  license_url: https://opensource.org/license/lgpl-3-0/
  license_file:
    - COPYING
    - COPYING.LESSER
  license_family: LGPL
  summary: "Open-Source Quantum Chemistry - an electronic structure package in C++ driven by Python"
  description: |
    Psi4 is an open-source suite of ab initio quantum chemistry programs designed for efficient,
    high-accuracy simulations of a variety of molecular properties. We can routinely perform computations
    with more than 2500 basis functions running serially or on multi-core machines. With computationally
    demanding portions written in C++, Pybind11 exports many of the C++ classes into Python, and a
    flexible Python driver, Psi4 strives to be friendly to both users and developers.

extra:
  recipe-maintainers:
    - loriab

#######

#outputs:
#    - name: psi4
#      build:
#          requires_features:
#              blas: {{ blas_impl }}
#          run_exports:
#              - {{ pin_subpackage('psi4', max_pin='x.x') }}
#          ignore_run_exports:
#              - numpy
#      files:
#          - bin/psi4
#          - include/psi4
#          - lib/python{{ PY_VER }}/site-packages/psi4
#          - share/cmake/psi4
#          - share/cmake/Target*/*
#          - share/psi4
#      test:
#          commands:
#              # Actually test
#              - PASSFAIL="--passfail"           # [linux]
#              - PASSFAIL=""                     # [osx]  # Mac threading occasionally bizarre
#              - python $PREFIX/share/psi4/scripts/test_threading.py --passfail --ldd  # [py3k]
#              - python $PREFIX/share/psi4/scripts/test_threading.py ${PASSFAIL} --psiapi -n6  # [py3k]
#              - python $PREFIX/share/psi4/scripts/test_threading.py ${PASSFAIL} --psithon -n6  # [py3k and not osx]


## NOTES
## -----
##
## * weird mkl 2019-2021 pinning:
##      build:
##          ignore_run_exports:
##              # allow pin_compatible below to trump native mkl run_exports to permit 2019/2020 compatibility
##              - mkl                            # [linux]
##      requirements:
##          host:
##              - mkl-devel {{ mkl }}            # [blas_impl == 'mkl']
##          run:
##              - {{ pin_compatible('mkl', upper_bound='2021.0') }}  # [linux]
#
