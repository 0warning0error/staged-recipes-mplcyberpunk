diff --git a/python/packager/nativelib.py b/python/packager/nativelib.py
index a888463..1504ba0 100644
--- a/python/packager/nativelib.py
+++ b/python/packager/nativelib.py
@@ -134,16 +134,28 @@ def locate_or_build_libtl2cgen(
 
     if build_config.use_system_libtl2cgen:
         # Find libtl2cgen from system prefix
-        sys_prefix = pathlib.Path(sys.prefix).absolute().resolve()
-        libtl2cgen_sys = sys_prefix / "lib" / _lib_name()
-        if not libtl2cgen_sys.exists():
-            raise RuntimeError(
-                f"use_system_libtl2cgen was specified but {_lib_name()} is "
-                f"not found in {libtl2cgen_sys.parent}"
-            )
-
-        logger.info("Using system tl2cgen: %s", str(libtl2cgen_sys))
-        return libtl2cgen_sys
+        sys_prefix = pathlib.Path(sys.prefix)
+        sys_prefix_candidates = [
+            sys_prefix / "lib",
+            # Paths possibly used on Windows
+            sys_prefix / "bin",
+            sys_prefix / "Library",
+            sys_prefix / "Library" / "bin",
+            sys_prefix / "Library" / "lib",
+        ]
+        sys_prefix_candidates = [
+            p.expanduser().resolve() for p in sys_prefix_candidates
+        ]
+        for candidate_dir in sys_prefix_candidates:
+            libtl2cgen_sys = candidate_dir / _lib_name()
+            if libtl2cgen_sys.exists():
+                logger.info("Using system tl2cgen: %s", str(libtl2cgen_sys))
+                return libtl2cgen_sys
+        raise RuntimeError(
+            f"use_system_libtl2cgen was specified but {_lib_name()} is "
+            f"not found. Paths searched (in order): \n"
+            + "\n".join([f"* {str(p)}" for p in sys_prefix_candidates])
+        )
 
     libtl2cgen = locate_local_libtl2cgen(toplevel_dir, logger=logger)
     if libtl2cgen is not None:
diff --git a/python/tl2cgen/libloader.py b/python/tl2cgen/libloader.py
index 57688e3..ca9a858 100644
--- a/python/tl2cgen/libloader.py
+++ b/python/tl2cgen/libloader.py
@@ -4,7 +4,6 @@
 import ctypes
 import os
 import pathlib
-import platform
 import sys
 import warnings
 from typing import List
@@ -23,21 +22,25 @@ def _find_lib_path() -> List[pathlib.Path]:
     """
     curr_path = pathlib.Path(__file__).expanduser().absolute().parent
     dll_path = [
-        # When installed, libtreelite will be installed in <site-package-dir>/lib
+        # When installed, libtl2cgen will be installed in <site-package-dir>/lib
         curr_path / "lib",
         # Editable installation
         curr_path.parent.parent / "build",
-        # Use libtreelite from a system prefix, if available. This should be the last option.
-        pathlib.Path(sys.prefix).absolute().resolve() / "lib",
+        # Use libtl2cgen from a system prefix, if available. This should be the last option.
+        pathlib.Path(sys.prefix).expanduser().resolve() / "lib",
     ]
 
     if sys.platform == "win32":
-        if platform.architecture()[0] == "64bit":
-            dll_path.append(curr_path.joinpath("../../windows/x64/Release/"))
-            dll_path.append(curr_path.joinpath("./windows/x64/Release/"))
-        else:
-            dll_path.append(curr_path.joinpath("../../windows/Release/"))
-            dll_path.append(curr_path.joinpath("./windows/Release/"))
+        # On Windows, Conda may install libs in different paths
+        sys_prefix = pathlib.Path(sys.prefix)
+        dll_path.extend(
+            [
+                sys_prefix / "bin",
+                sys_prefix / "Library",
+                sys_prefix / "Library" / "bin",
+                sys_prefix / "Library" / "lib",
+            ]
+        )
         dll_path = [p.joinpath("tl2cgen.dll") for p in dll_path]
     elif sys.platform.startswith(("linux", "freebsd", "emscripten", "OS400")):
         dll_path = [p.joinpath("libtl2cgen.so") for p in dll_path]
